#!/bin/bash

# JUDGECLASS=$1; shift
# DEBUG_MODE=false; [[ $1 == "true" ]] && DEBUG_MODE=true; shift
# TOPIC=$1; shift
# QUERY=$1; shift
# rules=5
# TEMP=$(mktemp)
#
# source "${ABS_PATH}/handle_errors"
# source "${ABS_PATH}/colors"
#
#
# RESULT_DIR="result/${JUDGECLASS}"
#
# # SOFIA="${ABS_PATH}/sofia-ml-read-only/sofia-ml"
#
# $DEBUG_MODE && echo $JUDGECLASS
#
#
# ######
# $DEBUG_MODE && echo "Creating directories to store results..."
#
# try
# (
#     rm -rf "${RESULT_DIR}/${TOPIC}/"
#     mkdir -p "${RESULT_DIR}/${TOPIC}/"
#
# ) 2> $STD_ERROR_OUT
#
# catch || {
#     exit_on_error
# }
#
# $DEBUG_MODE && echo -e "${GREEN}Done.${END}"
# $DEBUG_MODE && echo -e "${BLUE}Creating topic directory topic (${TOPIC})...${END}"
#
#
#
# try
# (
#     rm -rf $TOPIC
#     mkdir $TOPIC
#     #echo "cat judgement/qrels.$JUDGECLASS.list | grep $TOPIC  | cut -d' ' -f3 > $TOPIC/goldendb"
#     cat judgement/qrels.$JUDGECLASS.list | grep $TOPIC  | cut -d' ' -f3 | sort > $TOPIC/goldendb
#
# ) 2> $STD_ERROR_OUT
#
# catch || {
#     exit_on_error
# }
#
# $DEBUG_MODE && echo -e "${GREEN}Done.${END}"
# $DEBUG_MODE && echo "Creating file 'N' with number of documents..."
#
# ######
#
# try
# (
#     : '
#         Creates a `N` file with number of all docs
#     '
#     echo `wc -l < "$JUDGECLASS".svm.fil` > N
#
# ) 2> $STD_ERROR_OUT
#
# catch || {
#     exit_on_error
# }
#
# $DEBUG_MODE && echo -e "${GREEN}Done.${END}"
# $DEBUG_MODE && echo "Preparing 'docfils' file with all documents..."
#
# pushd $TOPIC
#
# echo "$QUERY" > "$TOPIC".seed.doc
#
# ######
# ln -n ../$JUDGECLASS.svm.fil $JUDGECLASS.svm.fil
#
# try
# (
#     cut -d' ' -f1 ../$JUDGECLASS.svm.fil | sed -e 's/.*/& &/' > docfil
#     cut -d' ' -f1 docfil | cat -n > docfils
#
# ) 2> $STD_ERROR_OUT
#
# catch || {
#     exit_on_error
# }
# $DEBUG_MODE && echo -e "${GREEN}Done.${END}"
# $DEBUG_MODE && echo "Preparing relevance calculation files..."
#
# : '
#     The `new$N` files keeps the files used on
#         the $N-th iteration
# '
#
# ######
# try
# (
#     touch rel.$TOPIC.fil
#     touch prel.$TOPIC
#
#     rm -rf prevalence.rate
#     touch prevalence.rate
#
#     rm -rf rel.rate
#     touch rel.rate
#
#     rm -f new[0-9][0-9].$TOPIC tail[0-9][0-9].$TOPIC self*.$TOPIC gold*.$TOPIC
#     touch new00.$TOPIC
#
# ) 2> $STD_ERROR_OUT
#
# catch || {
#     exit_on_error
# }
# $DEBUG_MODE && echo -e "${GREEN}Done.${END}"
#
# # Total number of documents
# NDOCS=`cat docfils | wc -l`
#
# #############################
# #############################
# #############################
# #############################
# #############################
# #############################
# #############################
# #############################
# #############################
# #############################
# #############################
# #############################
# #############################
# #############################
# #############################
# #############################
# #############################
# #############################
# #############################
# #############################
# #############################
# #############################
# #############################
# #############################
# #############################
# #############################
# #############################
# #############################
# #############################
#
# : '
#     $TOPIC.seed.doc stores the $TOPIC query
# '
#
# cp $TOPIC.seed.doc ../$TOPIC.seed.doc
#
# popd
#
# $DEBUG_MODE && echo -e "${BLUE}Executing ./dofeaturesseed4...${END}"
#
# ./dofeaturesseed $TOPIC.seed.doc $TOPIC $JUDGECLASS $DEBUG_MODE
#
# $DEBUG_MODE && echo -e "${GREEN}Finished ./dofeaturesseed4${END}"
#
# pushd $TOPIC
#
# ######
# try
# (
#     sed -e 's/[^ ]*/0/' ../$JUDGECLASS.svm.fil | ../dosplit
#     echo  "Preparing ../$JUDGECLASS.svm.fil (runs ../dosplit) "
#
# ) 2> $STD_ERROR_OUT
#
# catch || {
#     exit_on_error
# }
#
# try
# (
#     sed -e 's/[^ ]*/1/' svm.$TOPIC.seed.doc.fil > $TOPIC.synthetic.seed
#     echo  "Preparing $TOPIC.synthetic.seed..."
#
# ) 2> $STD_ERROR_OUT
#
# catch || {
#     exit_on_error
# }
#
#
# #key value database kissdb
#     KEYSIZE=$(awk 'BEGIN{a=0}{len = length($1); a=a<len?len:a}END{print a}' \
#         $JUDGECLASS.svm.fil)
#     VALSIZE=$(awk 'BEGIN{a=0}{len = length($0); a=a<len?len:a}END{print a}' \
#         $JUDGECLASS.svm.fil)
#     KEYSIZE=$((KEYSIZE+2))
#     VALSIZE=$((VALSIZE+2))
#
#  try
# (
#
#
#
#
#
#     if [ ! -f "../$JUDGECLASS.db" ]; then
#
#         $DEBUG_MODE && echo "Indexing $JUDGECLASS, keysize = $KEYSIZE, valsize = $VALSIZE"
#
#         ../indexer $JUDGECLASS.svm.fil "$JUDGECLASS".db $KEYSIZE $VALSIZE || (echo "Error creating db"; exit 1)
#     fi
#
#
# ) 2> $STD_ERROR_OUT
#
# catch || {
#     exit_on_error
# }
#
#
#
#
# #             fi
# #         fi
# #pushd $TOPIC
#
# $DEBUG_MODE && echo -e "${GREEN}Done.${END}"

source ./preprocess $JUDGECLASS `echo $DEBUG_MODE` $TOPIC $QUERY

source ../training $TOPIC $QUERY $JUDGECLASS `echo $DEBUG_MODE` $KEYSIZE $VALSIZE

echo "select the top 95% relevant documents  from the last ranking"
echo " 20: Estimate ρ̂ = 1.05 "
export prevalence=`echo "scale=5; ($Estimate * 1.05) / $NDOCS  " | bc`
echo "prevalence $prevalence"
export m=`echo "scale=5; ($prevalence * $NDOCS ) * 0.90 " | bc`
prevalence_int=${m%.*}

python3 ../selectRound.py store_estimation $prevalence_int


export j=`cat flagOut`

export t=`wc -l < new$j.$TOPIC`


NumberDocument=$(($NDOCS-$t))
sort -k 2 -n inlr.out.$N.$TOPIC > sorted_ranking
tail -$NumberDocument sorted_ranking | cut -d$'\t' -f1 > result_ranking.$TOPIC

n=$(($NDOCS-$prevalence_int))
tail -$NDOCS sorted_ranking | cut -d' ' -f1 | head -$n > result_plus.$TOPIC


cat ssarp* result_ranking.$TOPIC >> result.$TOPIC
echo "valor t =$t valor j =$j valor NumberDocument =$NumberDocument NDOCS=$NDOCS"


export relNumber=`cat result.$TOPIC | sort | uniq | join - goldendb | uniq | wc -l`
NumberDocument=`cat result.$TOPIC | sort | uniq | wc -l`


total=`wc -l < goldendb`
recall=`echo "scale=5; ($relNumber / $total)" | bc`
precisao=`echo "scale=5; ($relNumber / $NumberDocument)" | bc`
echo "resultado final SCAL $TOPIC - $relNumber ------$NumberDocument  recall $recall  precisao $precisao"


echo -e "${BLUE}calling second sampling strategy proposed by REVEAL ${END}"
../script_select_pairs.sh $TOPIC $JUDGECLASS $prevalence_int $rules 20


#         rm -rf svm.test.*


 popd



 mv $TOPIC "${RESULT_DIR}/"
 rm $TOPIC.seed.doc


# echo -e "${WHITE}Apos finalizar o método o numero de docs recuperados do método  será o top total documentos acessados até a ultima executação que encontrou documentos relevantes. Por exemplo, se a execução N =20 foi a ultima a achar documentos releventas na amostragem deve-se pegar os top ~300 como relevantes. Essa será saida do método. Ou seja, o arquivo rel.rate armazena os relevantes recuperados, é só usar ele para implementar isso.${END}"


#rm -rf "$JUDGECLASS".svm.fil
#rm "$JUDGECLASS".df

#rm N

# Generate LSI from tfdf
# python clustering/doLSI.py --input=tfdf_oldreut --output=LSIVector/"$JUDGECLASS".lsi.dump --mapping=LSIVector/"$JUDGECLASS".mapping.dump --latent=200 --choice=entropy --normalization=yes
