#!/bin/bash


source "${ABS_PATH}/handle_errors"
source "${ABS_PATH}/colors"

JUDGECLASS=$1; shift
VERBOSE=false; [[ $1 == "true" ]] && VERBOSE=true; shift
TOPIC=$1; shift


pushd $TOPIC

$VERBOSE && e_success "Starting seed selection..."
cp ../Corpus/SeedRanking"$TOPIC" .


cat $TOPIC.synthetic.seed.svd | cut -d' ' -f2-  > syntetic_seed 



export discretize=0
#loop over the ranking
roundSize=30
startActive=1

i=0
echo "VAMO Q AGORA Ã‰ PRA DAR CERTO"
MISSING_REL=0
while true; do
   step=$((i+1))
   begin=$((i*roundSize+1))
   end=$((i*roundSize+roundSize))
   sed -n "${begin},${end}p" ../Corpus/"SeedRanking"$TOPIC > sub_new$i.$TOPIC
   
   
   #cada rodada trocar os random docs 
   tail -n 5000 SeedRanking"$TOPIC" \
                | shuf -n 1000 \
                | sort -k1 \
                | join - $JUDGECLASS.svm.fil.svd -2 1 -1 1 \
                | cut -d' ' -f2- \
                | sed -e's/[^ ]*/-1/' > random_seed 
                
    cat random_seed syntetic_seed > seed_ssarp_labels.$TOPIC
   
   #cat ranking/ranking`echo $TOPIC`.txt> top_small
   #head -n 10 goldendb.$TOPIC
   
   $VERBOSE && e_success "Relevants in the seed `cat sub_new$i.$TOPIC | sort | join - goldendb | wc -l `" 
   
   round=$(($i+2))
   source ../active_learning $CORPUS `echo $VERBOSE` $TOPIC $round $discretize $startActive  sub_new$i.$TOPIC
   discretize=1
   startActive=2
        #-----------------------------------------------------------------
        # statics calculation
        #-----------------------------------------------------------------
        not_relevants=$(($not_relevants + `wc -l < x_negat."$round"`))

        
        
#         if [ $acc -eq 0 ]; then
#             memory=$(($memory +1))
#             if [ $memory -gt 5 ]; then
#                 echo "memory stop"
#                 break
#             fi
#         else
#             memory=0
#         fi
#        echo "memory value is $memory"
        rel_found_sample=`wc -l < x_posit."$round"`  # relevants on previous sample
        rel_rate=`echo "scale=4; $rel_found_sample / $SAMPLE_SIZE" | bc`
        current_rel=`cat x_posit.* | wc -l`

        # TODO: Check if all_docs may be replaced with TOTAL_DOCUMENTS.
        already_labeled_docs=`cat ssarp* | wc -l`
        all_docs=`cat new[0-9][0-9].$TOPIC | wc -l`

        
        $VERBOSE && e_info "\tNegative documents .............. `wc -l < x_negat.$round`"
            
           
        temp=$((`wc -l < sub_new_positives.$round`- `wc -l < x_posit.$round`))
        
        MISSING_REL=$(($temp+$MISSING_REL))    
        
#             
            
        $VERBOSE  && e_info "\tRelevants lab ..... $rel_found_sample" 
        $VERBOSE  && e_info "\tNot Relevants lab. `wc -l < x_negat."$round"`" 
        
        $VERBOSE  && e_info "\tSample size ....... $SAMPLE_SIZE"
        $VERBOSE  && e_info "\tRel in the Sample . $all_positive"
        $VERBOSE  && e_info "\tSub sample size ... $sub_sample"   
        
        $VERBOSE  && e_info "\tSub sample Rel Doc. `wc -l < sub_new_positives.$round`" 
        $VERBOSE  && e_info "\tSample Rel Doc..... `cat new"$round".$TOPIC | sort | join - goldendb | wc -l`" 
     
        $VERBOSE  && e_info "\tAlready labeled ... $already_labeled_docs" 
        $VERBOSE  && e_info "\tAll docs .......... $all_docs"
        $VERBOSE  && e_info "\tRelevants rate .... $rel_rate"
        $VERBOSE  && e_info "\tCurrent relevants . $current_rel"
        $VERBOSE  && e_info "\tTotal relevants ... `wc -l < goldendb`"
        $VERBOSE  && e_info "\tRevelants missed .. $MISSING_REL"
   pos=`wc -l < x_posit.$round`
   if [ $pos -ge 1 ]
   then 
       sed -n -e 's/^\(1 \)*//' -e 1p x_posit.$round > posit_seed
       j=$(($round+1))
       printf -v round "%02d" $j
       $VERBOSE && e_success "we found a  pos doc, next round $round"
       export round
       break;
   fi
   i=$(($i+1))
done

popd
  
  
  
