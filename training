#!/bin/bash

#===============================================================================
#       USAGE:  ./training <topic> <query> <debug>
#
# DESCRIPTION:  Contains the training loop that judges files as relevant or not.
#===============================================================================

source "${ABS_PATH}/handle_errors"
source "${ABS_PATH}/colors"

SOFIA="'${ABS_PATH}'/sofia-ml-read-only/sofia-ml"

TOPIC=$1; shift
QUERY=$1; shift
DEBUG_MODE=false; [[ $1 == "true" ]] && DEBUG_MODE=true; shift
MAXTHREADS=5;

R=100                                   # Document sample size going to trainset
LAMBDA=0.0001                           # Lambda parameter for SVM
TOTAL_DOCUMENTS=`cat docfils | wc -l`   # Total quantity of documents
LABELED_DOCUMENTS=0                     # Total quantity of labeled documents
DOCS_TO_LABEL=1                         # Number of documents to be labeled in the current round

not_relevant=0                          # Documents not relevant so far
relevant=0                              # Documents relevant so far

#-------------------------------------------------------------------------
# parameters for kissdb, later this will be calculated somewhere else
#-------------------------------------------------------------------------
KEYSIZE=$(awk 'BEGIN{a=0}{len = length($1); a=a<len?len:a}END{print a}' $JUDGECLASS.svm.fil)
VALSIZE=$(awk 'BEGIN{a=0}{len = length($0); a=a<len?len:a}END{print a}' $JUDGECLASS.svm.fil)
KEYSIZE=$((KEYSIZE+2))
VALSIZE=$((VALSIZE+2))

#-------------------------------------------------------------------------
# performs the 100 looping rounds
#-------------------------------------------------------------------------
for round in $(seq -f "%02g" 0 99); do

    if [ $LABELED_DOCUMENTS -lt $TOTAL_DOCUMENTS ]; then

        $DEBUG_MODE && e_primary "Preparing trainset..."

        try
        (
            cp $TOPIC.synthetic.seed trainset

            cut -f2 docfils \
                | shuf -n $R \
                | sort \
                | .././indexer "$CORP".db $KEYSIZE $VALSIZE \
                | sed -e's/[^ ]*/-1/' >> trainset

        ) 2> $STD_ERROR_OUT

        catch || {
            exit_on_error
        }

        $DEBUG_MODE && e_success "Done."

        $DEBUG_MODE && e_primary "Preparing seed..."

        try
        (
            cat ssarp* > seed

            cat seed \
                | sort \
                | join - rel.$TOPIC.fil \
                | sed -e 's/^/1 /' \
                | sort \
                | uniq > intermediate_seed

            cat seed \
                | sort \
                | join -v1 - rel.$TOPIC.fil \
                | shuf -n 50000 \
                | sed -e 's/^/-1 /' \
                | sort \
                | uniq  >> intermediate_seed

        ) 2> $STD_ERROR_OUT

        catch || {
            exit_on_error
        }

        $DEBUG_MODE && e_success "Done."

        $DEBUG_MODE && e_primary "Adding content from seed to trainset..."

        try
        (
            cut -d' ' -f2 intermediate_seed \
                | .././indexer $JUDGECLASS.db $KEYSIZE $VALSIZE \
                | cut -d' ' -f2- \
                | paste -d' ' <(cut -d' ' -f1 intermediate_seed) - \
                | sort -n >> trainset

        ) 2> $STD_ERROR_OUT

        catch || {
            exit_on_error
        }

        $DEBUG_MODE && e_success "Done."

        #-----------------------------------------------------------------
        # calculate the prevalence of relevant documents on training set
        #-----------------------------------------------------------------
        REL_ON_TRAINSET=`grep -E "^1\b" trainset | wc -l`
        NOT_REL_ON_TRAINSET=`grep -E "^-1\b" trainset | wc -l`
        PREVALENCE_RATE=`echo "scale=4;
            $REL_ON_TRAINSET / ($REL_ON_TRAINSET + $NOT_REL_ON_TRAINSET)" | bc`

        echo $REL_ON_TRAINSET $NOT_REL_ON_TRAINSET $PREVALENCE_RATE >> prevalence.rate

        $DEBUG_MODE && e_primary "Executing training algorithm (sofia-ml)..."

        try
        (
            $SOFIA --learner_type logreg-pegasos --loop_type roc \
                --lambda $LAMBDA --iterations 2000000 \
                --training_file trainset --dimensionality 3300000 \
                --model_out svm_model &> classifier_output

            sofia_status=$?

        ) 2> $STD_ERROR_OUT

        catch || {
            exit_on_error
        }

        $DEBUG_MODE && e_success "Done."

        #-----------------------------------------------------------------
        # tests the trained model if tests already exists, or create tests
        # if they don't exists
        #-----------------------------------------------------------------
        if [[ $sofia_status -eq "0" ]]; then
            for test_file in svm.test.*; do
                while [ "$(jobs | grep 'Running' | wc -l)" -ge "$MAXTHREADS" ]; do
                    sleep 1
                done

                $DEBUG_MODE && e_primary "Testing previously trained model..."

                try
                (
                    $SOFIA --test_file $test_file --dimensionality 3300000 \
                        --model_in svm_model --results_file pout.$z \
                        &> classifier_output &

                ) 2> $STD_ERROR_OUT

                catch || {
                    exit_on_error
                }

                $DEBUG_MODE && e_success "Done."

            done

            wait

        else
            try
            (
                rm -f pout.svm.test.*
                cut -f2 docfils \
                    | sort -R \
                    | cat -n \
                    | sort -k2 \
                    | sed -e 's/ */-/' > pout.svm.test.1

            ) 2> $STD_ERROR_OUT

            catch || {
                exit_on_error
            }
        fi

        $DEBUG_MODE && e_primary "Preparing ranking.$round.$TOPIC..."

        try
        (
            cat new[0-9][0-9].$TOPIC > seed.$TOPIC

            cut -f1 pout.svm.test.* \
                | ../fixnum \
                | cat -n \
                | join -o2.2,1.2 -t$'\t' - docfils \
                | sort -k1 -n  > inlr.out.$round.$TOPIC

# CHANGE 1: sort -n seed.topic > temp; cat temp |...
            sort -n seed.$TOPIC \
                | join  -v2 - inlr.out.$round.$TOPIC -2 1 \
                | shuf \
                | sort -k 2 -r -g -s  > ranking.$round.$TOPIC

        ) 2> $STD_ERROR_OUT

        catch || {
            exit_on_error
        }

        $DEBUG_MODE && e_success "Done."

        $DEBUG_MODE && e_primary "Preparing new$round.$TOPIC."

        try
        (
            cat ranking.$round.$TOPIC \
                | cut -d' ' -f1 > new$round.$TOPIC

            cat new[0-9][0-9] > intermediate_seed

            if [ "$round" != "99" ] ; then
                head -$DOCS_TO_LABEL new$round.$TOPIC > new_temp
                mv new_temp new$round.$TOPIC
            fi

        ) 2> $STD_ERROR_OUT

        catch || {
            exit_on_error
        }

        $DEBUG_MODE && e_success "Done."

        $DEBUG_MODE && e_primary "Starting SCAL subsampling..."

        if [ $DOCS_TO_LABEL -le 30 ]; then
            sub_sample=$DOCS_TO_LABEL
        else
            sub_sample=30
        fi

        shuf -n $b new$round.$TOPIC > sub_new$round.$TOPIC

        python2.7 ../doJudgementMain.py --topic=$TOPIC \
            --judgefile=../judgement/qrels.$JUDGECLASS.list \
            --input=sub_new$round.$TOPIC \
            --output=rel.$TOPIC.$round.Judged.doc.list \
            --record=$TOPIC.record.list

        cat rel.$TOPIC.$round.Judged.doc.list >> rel.$TOPIC.fil
        sort rel.$TOPIC.fil | uniq > temp
        mv temp rel.$TOPIC.fil

        $DEBUG_MODE && e_success "Done."

        $DEBUG_MODE && e_primary "Starting SSARP stage..."

        if [ $not_relevant -lt 1 ] || [ $relevant -lt 1 ]; then
            $DEBUG_MODE && e_secondary "\tStore seed in ssarp file..."

            cp sub_new$round.$TOPIC ssarp$round.$TOPIC

            cat sub_new$round.$TOPIC \
                | sort \
                | uniq \
                | join - rel.$TOPIC.fil \
                | cut -d' ' -f1 \
                | sed -e 's/^/1 /' > x_posit.$round

            cat sub_new$round.$TOPIC \
                | sort \
                | uniq \
                | join - rel.$TOPIC.fil -v1 \
                | cut -d' ' -f1 \
                | sed -e 's/^/-1 /' > x_negat.$round

            cat  x_negat.* \
                | sort -k2 \
                | join - ../$JUDGECLASS.svm.fil.svd -2 1 -1 2 > seed_ssarp.$TOPIC

            cat  x_posit.* \
                | shuf -n 1 \
                | sort -k2 \
                | join - ../$JUDGECLASS.svm.fil.svd -2 1 -1 2 >> seed_ssarp.$TOPIC


        else

        fi

        $DEBUG_MODE && e_success "Done."

    fi

done
