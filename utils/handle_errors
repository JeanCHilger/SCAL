#!/bin/bash

source "${UTIL_PATH}/colors"

CODE_START=""
CODE_END=""
BLOCK_LINE=""

export STD_ERROR_OUT="std.error.log"

export EMPTY_VARIABLE_EXCEPTION=12

try() {
    set +e
    if (( $# > 0 )); then
        CODE_START=$1

        if (( $# > 1 )); then
            CODE_END=$2
        else
            CODE_END=$CODE_START
        fi

    else
        CODE_START=""
        CODE_END=""

    fi

    BLOCK_LINE=`caller | cut -d ' ' -f1`
}

catch() {
    if [[ `cat "$STD_ERROR_OUT" | wc -l` -ne 0 ]]; then
        export ERROR_CODE=1

        return $ERROR_CODE
    fi
}

throw() {
    EXCEPTION_CODE=$1
    EXCEPTION_MSG=""
    output_msg=""
    if (( $# > 1 )); then
        EXCEPTION_MSG=$2
    fi

    case $EXCEPTION_CODE in

        $EMPTY_VARIABLE_EXCEPTION )
            output_msg="${output_msg}${RED}EMPTY VARIABLE EXCEPTION:${END} \n"

            if [[ -n $EXCEPTION_MSG ]]; then
                output_msg="${output_msg}\t${EXCEPTION_MSG}\nAborting..."

            else
                output_msg="${output_msg}\tAn important variable is empty.\nAborting..."

            fi

            ;;
    esac

    echo -e $output_msg > /dev/tty

    exit $EXCEPTION_CODE
}

__get_error_log_msg() {
    STD_ERROR=""

    while IFS="" read -r line; do
        STD_ERROR="\t${STD_ERROR}${line}\n"
    done < $STD_ERROR_OUT

    echo -ne $STD_ERROR

    export ERROR_MSG=`echo -ne $STD_ERROR`
}

exit_on_error() {
    output_msg=""
    if [[ $ERROR_CODE ]]; then
        output_msg="${output_msg}${RED}ERROR "

        # if [[ -n $CODE_START ]]; then
        #     if [[ $CODE_START == $CODE_END ]]; then
        #         output_msg="${output_msg}near line ${CODE_START} "
        #
        #     else
        #         output_msg="${output_msg}near lines ${CODE_START} and ${CODE_END} "
        #     fi
        # fi

        e_error "${output_msg}within block line ${BLOCK_LINE}." > /dev/tty

        echo -e `__get_error_log_msg`

        e_error "Aborting..." > /dev/tty

        exit $ERROR_CODE
    fi
}
